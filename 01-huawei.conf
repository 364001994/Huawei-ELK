input {
   udp {
    port => 514
    type => syslog 
   }
}
filter {
 if [type] == "syslog" {
    grok {
      match => { "message" => "%{HUAWEI_USG_LOGIN_SUCCESS_SSH}"}
      match => { "message" => "%{HUAWEI_USG_LOGIN_FAILED_SSH}"}
      match => { "message" => "%{HUAWEI_USG_LOGIN_HTTP}"}
      match => { "message" => "%{HUAWEI_USG_RECORD}"}
      match => { "message" => "%{HUAWEI_CE_LOGIN_FAILED_SSH}"}
      match => { "message" => "%{HUAWEI_CE_LOGIN_SUCCESS_SSH}"}
      match => { "message" => "%{HUAWEI_CE_RECORD}"}
      match => { "message" => "%{HUAWEI_CE_RECORD_Y_OR_N}"}
      match => { "message" => "%{HUAWEI_CORE_SW_RECORD}"}
      match => { "message" => "%{HUAWEI_CORE_SW_SUCCESS_SSH}"}
      match => { "message" => "%{HUAWEI_CORE_SW_FAILED_SSH}"}
      match => { "message" => "%{HUAWEI_CORE_SW_SSH_LOGOUT}"}
      match => { "message" => "%{HUAWEI_CORE_SW_FAILED_HTTP}"}
      match => { "message" => "%{HUAWEI_CORE_SW_SUCCESS_HTTP}"}
      match => { "message" => "%{HUAWEI_RT_FAILED_SSH}"}
      match => { "message" => "%{HUAWEI_RT_RECORD}"}
      match => { "message" => "%{HUAWEI_RT_LOGIN_USER}"}
      add_field => [ "received_at" , "%{@timestamp}" ] 
   }
        translate {
                field => "SyslogProgram"
                destination => "program"
                override => "false"
                dictionary_path => "/etc/logstash/translate.yml"
        }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  if "_grokparsefailure" in [tags] {
  drop { }
}
}
output {
  stdout { codec => rubydebug }
  elasticsearch {
     hosts => ["localhost:9200"]
    index => "huawei-%{+YYYY.MM.dd}"
#    manage_template => "true"
#    template => "/opt/elasticsearch.json" 
#    template_overwrite => "true"
    document_type => "huawei"
  }
}
