input {
  udp {
    port => 514
    type => Huawei
  }
}

filter {
	if [type] == "Huawei" {
		grok{
			match => { "message" => "%{DISPLAY_CMDRECORD}" } #OK
			match => { "message" => "%{CMDRECORD}" } #OK
			match => { "message" => "%{LOGOUT}" } 
			match => { "message" => "%{LOGIN}" } 
			match => { "message" => "%{SSH_FAIL}" }
			match => { "message" => "%{LOGINFAILED}" }
			match => { "message" => "%{WEB}" }			
			match => { "message" => "%{CMDCONFIRM_NOPROMPT}" }			
			match => { "message" => "%{CMDCONFIRM_RECORD}" }			
			match => { "message" => "%{CMDCONFIRM_UNIFORMRECORD}" }
			match => { "message" => "%{SSH_USER_LOGIN}" }
			match => { "message" => "%{SSH_USER_LOGIN_FAIL}" }
			match => { "message" => "%{SSH_USER_LOGOUT}" }
			
			
	
		###firewall USG V500R005C10SPC300###
			match => { "message" => "%{PACKET_DENY}" }
			match => { "message" => "%{POLICYDENY}" }
			match => { "message" => "%{LOGINSUC}" }
			match => { "message" => "%{ADDOK}" }
			match => { "message" => "%{DELOK}" }
			match => { "message" => "%{DELALLOK}" }
			match => { "message" => "%{DETECT}" }
			match => { "message" => "%{BOTNET}" }
			match => { "message" => "%{CNC}" }
			match => { "message" => "%{EXCEPTION}" }
			match => { "message" => "%{TROJAN}" }
			match => { "message" => "%{WORM}" }
			match => { "message" => "%{AV}" }
			
		###Router AR2200 ###
			match => { "message" => "%{STATE_CHG_UPDOWN}" } #Status BGP Peer
			match => { "message" => "%{IPV4_DEFT_RT_CHG}" } #Default Router
						
		################################################
		}
		
		### record
		if [Brief] == "DISPLAY_CMDRECORD" or [Brief] == "CMDRECORD" or [Brief] == "CMDCONFIRM_NOPROMPT" or [Brief] == "CMDCONFIRM_RECORD"	or [Brief] == "CMDCONFIRM_UNIFORMRECORD"	
		{
			mutate { add_field => {"Alias" => "record"}}								   
		}
	
		### auth

		if [Brief] == "LOGINFAILED" or [Brief] == "LOGIN" or [Brief] == "LOGOUT" or [Brief] == "SSH_FAIL" or [Brief] == "FAIL" or [Brief] == "OUT" or [Brief] == "PASS" or [Brief] == "USERLOGOUT" or [Brief] == "USERLOGIN" or [Brief] == "SSH_USER_LOGIN" or [Brief] == "SSH_USER_LOGIN_FAIL" or [Brief] == "SSH_USER_LOGOUT" or [Brief] == "LOGINOK" or [Brief] == "LOGINFAIL"
		{
			mutate { add_field => {"Alias" => "auth"}}
		}

		### Logs Packet Deny
		if [Brief] == "PACKET_DENY" or [Brief] == "POLICYDENY"
		{
			mutate { add_field => {"Alias" => "traffic"}}
		}

		### Login VPN 
		if [Brief] == "LOGINSUC" or [Brief] == "USRPWDERR" or [Brief] == "USRPWDERR" or [Brief] == "SSLVPNLOGOUT" or [Brief] == "NESRV"
		{
			mutate { add_field => {"Alias" => "vpn"}}
		}
		
	
		### Add Backlist 
		if [Brief] == "ADDOK" or [Brief] == "DELOK" or [Brief] == "DELALLOK"
		{
			mutate { add_field => {"Alias" => "backlist"}}
		}
		
		### IPS
		if [Brief] == "DETECT" or [Brief] == "BOTNET" or [Brief] == "CNC" or [Brief] == "EXCEPTION" or [Brief] == "TROJAN" or [Brief] == "WORM" or [Brief] == "ATTACK"
		{
			mutate { add_field => {"Alias" => "ips"}}
		}
		### BGP
		if [Brief] == "STATE_CHG_UPDOWN"
		{
			mutate { add_field => {"Alias" => "bgp"}}
		}
		if [Brief] == "STATE_CHG_UPDOWN"
		{
			mutate { add_field => {"Alias" => "default router"}}
		}
		
		### AV Antivirus
		if [Brief] == "VIRUS"
		{
			mutate { add_field => {"Alias" => "virus"}}
		}
		
		
		### Translet UserType
		translate {
			field => "[Serverity]"
			destination => "[LogLevel]"
			override => "true"
			dictionary_path => "/etc/logstash/translate/translate.yml"
		}	
		translate {
			field => "[host]"
			destination => "[Device]"
			override => "true"
			dictionary_path => "/etc/logstash/translate/device.yml"
		}			
		### Drop uder _system_
		if "_system_" in [User] {drop {}}
		if "**" in [User] {drop {}}
		if "SECIF/6/STREAM" in [message] {drop {}}
		if "SEC/5/STREAM" in [message] {drop {}}
		if "STATSTREAM" in [message] {drop {}}
		if "SEC/5/STREAM6" in [message] {drop {}}
		if "SEC/4/SESSION" in [message] {drop {}}
		if "SEC/4/ATCKDF" in [message] {drop {}}
		mutate {remove_field  => ["@version"]}
		mutate {remove_field  => ["Serverity"]}
		mutate {rename  => {"type" => "Type"}}
		#mutate {rename  => {"message" => "Message"}}
		mutate {rename  => {"host" => "Host"}}
		#mutate { add_field => "LogLevel"}
		#mutate { gsub => [ "msg", "\\n\\t", " " ] }
		
		#########################################
	
	}
}
output {
stdout { codec => rubydebug }
	if [Alias] == "auth" or [Alias] == "record"{
		elasticsearch {
			hosts => "http://elastic:aristi@elastic:9200"
			index => "auth-%{+YYYY-MM-dd}"
		}
	}
	else if "_grokparsefailure" in [tags]{
			elasticsearch {
			hosts => "http://elastic:user@password:9200"
			index => "grokparsefailure"
		}
	}
	else  {
		elasticsearch {
			hosts => "http://elastic:user@password:9200"
			index => "network-%{+YYYY-MM-dd}"
		}
	}
}
     
